{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react-p1\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport SearchBar from './components/SearchBar';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport DailyForecast from './components/DailyForecast';\nimport './styles/main.css';\nimport './styles/skyline.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [hourlyData, setHourlyData] = useState([]);\n  const [dailyData, setDailyData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_KEY = '8129fc7973f8193956223b8b4e5d46a0'; // Your working API key\n\n  const weatherQuotes = [\"Sunshine is delicious, rain is refreshing, wind braces us up, snow is exhilarating.\", \"There is no such thing as bad weather, only different kinds of good weather.\", \"Weather is a great metaphor for life — sometimes it's good, sometimes it's bad.\"];\n  const fetchWeatherData = async (city = 'London') => {\n    setLoading(true);\n    setError(null);\n    try {\n      // First fetch basic weather data to get coordinates\n      const currentResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n\n      // Then fetch detailed forecast using coordinates\n      const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentResponse.data.coord.lat}&lon=${currentResponse.data.coord.lon}&exclude=minutely,alerts&appid=${API_KEY}&units=metric`);\n      setWeatherData(currentResponse.data);\n      setHourlyData(forecastResponse.data.hourly);\n      setDailyData(forecastResponse.data.daily);\n    } catch (err) {\n      console.error(\"API Error:\", err);\n      if (err.response) {\n        // Server responded with error status\n        if (err.response.status === 401) {\n          setError(\"Invalid API Key. Please check your OpenWeatherMap API key.\");\n        } else if (err.response.status === 404) {\n          setError(\"City not found. Please try a different location.\");\n        } else {\n          setError(\"Failed to fetch weather data. Please try again later.\");\n        }\n      } else if (err.request) {\n        // Request was made but no response\n        setError(\"Network error. Please check your internet connection.\");\n      } else {\n        // Other errors\n        setError(\"An unexpected error occurred. Please try again.\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch default weather on first load\n  useEffect(() => {\n    fetchWeatherData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app skyline-theme\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(WelcomeScreen, {\n            quotes: weatherQuotes,\n            onGetStarted: () => fetchWeatherData()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/weather\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-container\",\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: fetchWeatherData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loader\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Loading weather data...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error-message\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => fetchWeatherData(),\n                children: \"Try Again\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this), weatherData && !loading && !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n                data: weatherData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(HourlyForecast, {\n                hourlyData: hourlyData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(DailyForecast, {\n                dailyData: dailyData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"laxEbkrhMojMxcNqWelh/MRLE6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","axios","WelcomeScreen","SearchBar","CurrentWeather","HourlyForecast","DailyForecast","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","weatherData","setWeatherData","hourlyData","setHourlyData","dailyData","setDailyData","loading","setLoading","error","setError","API_KEY","weatherQuotes","fetchWeatherData","city","currentResponse","get","forecastResponse","data","coord","lat","lon","hourly","daily","err","console","response","status","request","children","className","path","element","quotes","onGetStarted","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onClick","_c","$RefreshReg$"],"sources":["D:/project/react-p1/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport SearchBar from './components/SearchBar';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport DailyForecast from './components/DailyForecast';\nimport './styles/main.css';\nimport './styles/skyline.css';\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null);\n  const [hourlyData, setHourlyData] = useState([]);\n  const [dailyData, setDailyData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_KEY = '8129fc7973f8193956223b8b4e5d46a0'; // Your working API key\n\n  const weatherQuotes = [\n    \"Sunshine is delicious, rain is refreshing, wind braces us up, snow is exhilarating.\",\n    \"There is no such thing as bad weather, only different kinds of good weather.\",\n    \"Weather is a great metaphor for life — sometimes it's good, sometimes it's bad.\"\n  ];\n\n  const fetchWeatherData = async (city = 'London') => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // First fetch basic weather data to get coordinates\n      const currentResponse = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n      );\n      \n      // Then fetch detailed forecast using coordinates\n      const forecastResponse = await axios.get(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${currentResponse.data.coord.lat}&lon=${currentResponse.data.coord.lon}&exclude=minutely,alerts&appid=${API_KEY}&units=metric`\n      );\n\n      setWeatherData(currentResponse.data);\n      setHourlyData(forecastResponse.data.hourly);\n      setDailyData(forecastResponse.data.daily);\n      \n    } catch (err) {\n      console.error(\"API Error:\", err);\n      if (err.response) {\n        // Server responded with error status\n        if (err.response.status === 401) {\n          setError(\"Invalid API Key. Please check your OpenWeatherMap API key.\");\n        } else if (err.response.status === 404) {\n          setError(\"City not found. Please try a different location.\");\n        } else {\n          setError(\"Failed to fetch weather data. Please try again later.\");\n        }\n      } else if (err.request) {\n        // Request was made but no response\n        setError(\"Network error. Please check your internet connection.\");\n      } else {\n        // Other errors\n        setError(\"An unexpected error occurred. Please try again.\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch default weather on first load\n  useEffect(() => {\n    fetchWeatherData();\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"app skyline-theme\">\n        <Routes>\n          <Route \n            path=\"/\" \n            element={<WelcomeScreen \n              quotes={weatherQuotes} \n              onGetStarted={() => fetchWeatherData()}\n            />} \n          />\n          <Route\n            path=\"/weather\"\n            element={\n              <div className=\"weather-container\">\n                <SearchBar onSearch={fetchWeatherData} />\n                \n                {loading && (\n                  <div className=\"loading\">\n                    <div className=\"loader\"></div>\n                    <p>Loading weather data...</p>\n                  </div>\n                )}\n                \n                {error && (\n                  <div className=\"error-message\">\n                    <p>{error}</p>\n                    <button onClick={() => fetchWeatherData()}>Try Again</button>\n                  </div>\n                )}\n                \n                {weatherData && !loading && !error && (\n                  <>\n                    <CurrentWeather data={weatherData} />\n                    <HourlyForecast hourlyData={hourlyData} />\n                    <DailyForecast dailyData={dailyData} />\n                  </>\n                )}\n              </div>\n            }\n          />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}