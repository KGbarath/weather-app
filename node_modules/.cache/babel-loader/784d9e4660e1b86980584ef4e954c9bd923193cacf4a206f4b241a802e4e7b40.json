{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react-p1\\\\weather-app\\\\src\\\\components\\\\WeatherDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport CurrentWeather from './CurrentWeather';\nimport HourlyForecast from './HourlyForecast';\nimport DailyForecast from './DailyForecast';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WeatherDashboard = ({\n  apiKey\n}) => {\n  _s();\n  var _hourlyData$;\n  const [weatherData, setWeatherData] = useState(null);\n  const [hourlyData, setHourlyData] = useState([]);\n  const [dailyData, setDailyData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [backgroundImage, setBackgroundImage] = useState('/images/clear-sky.jpg');\n  const getBackgroundImage = weatherCondition => {\n    const condition = weatherCondition === null || weatherCondition === void 0 ? void 0 : weatherCondition.toLowerCase();\n    if (condition.includes('clear')) return '/images/clear-sky.jpg';\n    if (condition.includes('cloud')) return '/images/cloudy.jpg';\n    if (condition.includes('rain')) return '/images/rain.jpg';\n    if (condition.includes('snow')) return '/images/snow.jpg';\n    if (condition.includes('thunder')) return '/images/thunderstorm.jpg';\n    return '/images/clear-sky.jpg';\n  };\n  const fetchWeatherData = async city => {\n    if (!city.trim()) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const currentResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);\n      setWeatherData(currentResponse.data);\n      setBackgroundImage(getBackgroundImage(currentResponse.data.weather[0].main));\n      const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentResponse.data.coord.lat}&lon=${currentResponse.data.coord.lon}&exclude=minutely,alerts&appid=${apiKey}&units=metric`);\n      setHourlyData(forecastResponse.data.hourly);\n      setDailyData(forecastResponse.data.daily);\n    } catch (err) {\n      setError('City not found. Please try a different location.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-app\",\n    style: {\n      backgroundImage: `url(${backgroundImage})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-container\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: fetchWeatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading glass\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading weather data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error glass\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }, this), weatherData && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n          data: {\n            ...weatherData,\n            pop: (_hourlyData$ = hourlyData[0]) === null || _hourlyData$ === void 0 ? void 0 : _hourlyData$.pop\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(HourlyForecast, {\n          hourlyData: hourlyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DailyForecast, {\n          dailyData: dailyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherDashboard, \"CcQyJakG7oUzCZyu4Sn4CljI4Eg=\");\n_c = WeatherDashboard;\nexport default WeatherDashboard;\nvar _c;\n$RefreshReg$(_c, \"WeatherDashboard\");","map":{"version":3,"names":["React","useState","axios","SearchBar","CurrentWeather","HourlyForecast","DailyForecast","jsxDEV","_jsxDEV","Fragment","_Fragment","WeatherDashboard","apiKey","_s","_hourlyData$","weatherData","setWeatherData","hourlyData","setHourlyData","dailyData","setDailyData","loading","setLoading","error","setError","backgroundImage","setBackgroundImage","getBackgroundImage","weatherCondition","condition","toLowerCase","includes","fetchWeatherData","city","trim","currentResponse","get","data","weather","main","forecastResponse","coord","lat","lon","hourly","daily","err","className","style","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","pop","_c","$RefreshReg$"],"sources":["D:/project/react-p1/weather-app/src/components/WeatherDashboard.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport SearchBar from './SearchBar';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport HourlyForecast from './HourlyForecast';\r\nimport DailyForecast from './DailyForecast';\r\n\r\nconst WeatherDashboard = ({ apiKey }) => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [hourlyData, setHourlyData] = useState([]);\r\n  const [dailyData, setDailyData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [backgroundImage, setBackgroundImage] = useState('/images/clear-sky.jpg');\r\n\r\n  const getBackgroundImage = (weatherCondition) => {\r\n    const condition = weatherCondition?.toLowerCase();\r\n    if (condition.includes('clear')) return '/images/clear-sky.jpg';\r\n    if (condition.includes('cloud')) return '/images/cloudy.jpg';\r\n    if (condition.includes('rain')) return '/images/rain.jpg';\r\n    if (condition.includes('snow')) return '/images/snow.jpg';\r\n    if (condition.includes('thunder')) return '/images/thunderstorm.jpg';\r\n    return '/images/clear-sky.jpg';\r\n  };\r\n\r\n  const fetchWeatherData = async (city) => {\r\n    if (!city.trim()) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const currentResponse = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`\r\n      );\r\n      \r\n      setWeatherData(currentResponse.data);\r\n      setBackgroundImage(getBackgroundImage(currentResponse.data.weather[0].main));\r\n\r\n      const forecastResponse = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${currentResponse.data.coord.lat}&lon=${currentResponse.data.coord.lon}&exclude=minutely,alerts&appid=${apiKey}&units=metric`\r\n      );\r\n      \r\n      setHourlyData(forecastResponse.data.hourly);\r\n      setDailyData(forecastResponse.data.daily);\r\n    } catch (err) {\r\n      setError('City not found. Please try a different location.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-app\" style={{ backgroundImage: `url(${backgroundImage})` }}>\r\n      <div className=\"weather-container\">\r\n        <SearchBar onSearch={fetchWeatherData} />\r\n        \r\n        {loading && (\r\n          <div className=\"loading glass\">\r\n            <div className=\"loader\"></div>\r\n            <p>Loading weather data...</p>\r\n          </div>\r\n        )}\r\n        \r\n        {error && <p className=\"error glass\">{error}</p>}\r\n        \r\n        {weatherData && (\r\n          <>\r\n            <CurrentWeather data={{ ...weatherData, pop: hourlyData[0]?.pop }} />\r\n            <HourlyForecast hourlyData={hourlyData} />\r\n            <DailyForecast dailyData={dailyData} />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}